function [best_value, best_point, disparity_vector] = PIXEL_DISP(current_row, current_col,...
    pixel_value, right_image, block_size, disparity_range)

    best_value = 999999;
    best_point = [-1, -1];
    disparity_vector = [-1, -1];
    
    % we want to split the image into windows based on the blocksize.
    total_windows = round(disparity_range/block_size);
    
    for current_window = 1: total_windows
        
        min_col = current_col - ((current_window - 1) * block_size/2);
        max_col = min_col + block_size;
        min_row = current_row - block_size/2;
        max_row = min_row + block_size;
        
        if(min_col < 1)
            min_col = 1;
        end
        
        if(max_col > size(right_image, 1))
            max_col = size(right_image, 1);
        end
        
        if(min_row < 1)
            min_row = 1;
        end
        
        if(max_row > size(right_image, 2))
            max_row = size(right_image,2);
        end      
        
        % loop through each pixel in a window and get the best ssd value.
        window = right_image(min_col : max_col, min_row : max_row);
        for col = 1 : size(window,1)
            for row = 1 : size(window, 2)
                ssd_value = ssd(pixel_value, window(col, row));   
                if(ssd_value == 0 && ssd_value ~= 1)
                    disp("SSD: " + ssd_value);
                end
                if(ssd_value < best_value)
                    best_value = ssd_value;
                    best_point = [col, row];
                end
            end
        end        
    end    
end